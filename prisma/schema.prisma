// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  password        String
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Streaming service connections
  streamingServices StreamingService[]
  
  // User's watchlists and lists
  watchlists      Watchlist[]
  watchlistItems  WatchlistItem[]
  
  // NextAuth relations
  accounts        Account[]
  sessions        Session[]
  
  @@map("users")
}

model StreamingService {
  id          String   @id @default(cuid())
  userId      String
  serviceName String   // netflix, hulu, prime, disney, etc.
  isActive    Boolean  @default(true)
  connectedAt DateTime @default(now())
  lastSyncAt  DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serviceName])
  @@map("streaming_services")
}

model Watchlist {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean   @default(false)
  serviceName String?   // which streaming service this list comes from
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       WatchlistItem[]
  
  @@map("watchlists")
}

model WatchlistItem {
  id          String   @id @default(cuid())
  userId      String
  watchlistId String
  tmdbId      Int
  mediaType   String   // movie or tv
  title       String
  overview    String?
  posterPath  String?
  backdropPath String?
  releaseDate String?
  rating      Float?
  genres      String?  // JSON string of genre names
  status      String   @default("to_watch") // to_watch, watching, watched
  addedAt     DateTime @default(now())
  watchedAt   DateTime?
  notes       String?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  
  @@unique([userId, watchlistId, tmdbId])
  @@map("watchlist_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}